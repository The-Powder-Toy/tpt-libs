name: build

on:
  push:
    tags:
      - 'v*' # TAGNAME=`date +v%Y%m%d%H%M%S` bash -c 'git tag -s -a $TAGNAME -m $TAGNAME'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  build:
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      matrix:
        platform_short: [lin, mac, win]
        static_dynamic: [static, dynamic]
        exclude:
          - platform_short: lin
            static_dynamic: dynamic
          - platform_short: mac
            static_dynamic: dynamic
        include:
          - platform_short: lin
            os: ubuntu-latest
          - platform_short: mac
            os: macos-latest
          - platform_short: win
            os: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - id: get_vtag
        run: python ./.github/get-vtag.py ${{ github.ref }}
      - uses: actions/download-artifact@v1
        with:
          name: release_url
      - id: get_release_info
        run: bash -c "./.github/get-release-info.sh" ## gg github, this is terrible
      - if: matrix.os == 'macos-latest'
        run: brew install coreutils
      - if: matrix.os == 'windows-latest'
        run: python -m pip install meson ninja
      - run: bash -c 'PLATFORM_SHORT=${{ matrix.platform_short }} STATIC_DYNAMIC=${{ matrix.static_dynamic }} VTAG=${{ steps.get_vtag.outputs.VTAG }} ./build.sh'
      - id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: temp/libraries.zip
          asset_name: tpt-libs-prebuilt-${{ matrix.platform_short }}64-${{ matrix.static_dynamic }}-${{ steps.get_vtag.outputs.VTAG }}.zip
          asset_content_type: application/zip
      - run: bash -c 'PLATFORM_SHORT=${{ matrix.platform_short }} STATIC_DYNAMIC=${{ matrix.static_dynamic }} VTAG=${{ steps.get_vtag.outputs.VTAG }} ASSET=${{ steps.upload_release_asset.outputs.browser_download_url }} ./wrapfile.sh'
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: temp/libraries.wrap
          asset_name: tpt-libs-prebuilt-${{ matrix.platform_short }}64-${{ matrix.static_dynamic }}-${{ steps.get_vtag.outputs.VTAG }}.wrap
          asset_content_type: application/zip
